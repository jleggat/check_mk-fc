#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


factory_settings["fc_port_default_levels"] = {
    "operstatus"			: [ 1, 2 ],
    "adminstatus"			: True,
    "assumed_speed"			: 4,
    "C3Discards"			: (3.0, 20.0),
    "LinkFailures"			: (3.0, 20.0),
    "SyncLosses"			: (3.0, 20.0),
    "PrimSeqProtoErrors"	        : (3.0, 20.0),
    "InvalidTxWords"		        : (3.0, 20.0),
    "InvalidCrcs"			: (3.0, 20.0),
    "AddressIdErrors"		        : (3.0, 20.0),
    "LinkResetIns"			: (3.0, 20.0),
    "LinkResetOuts"			: (3.0, 20.0),
    "OlsIns"				: (3.0, 20.0),
    "OlsOuts"				: (3.0, 20.0),
}

fc_port_opermode = [ '', "unknown", "fPort", "flPort" ]
fc_port_adminstatus = [ '', "online", "offline", "testing" ]
fc_port_operstatus = [ '', "online", "offline", "testing", "linkFailure" ]
fc_port_speed     = [ '', '1Gbit', '2Gbit', 'auto-Neg', '4Gbit', '8Gbit', '10Gbit', ]
fc_inventory_monitor_state = True
fc_check_adminstate = True
fc_port_inventory_mode  = [ "2", "3", ]


def inventory_fc_port(checkname, info):
  inventory = []
  for port_id, port_mode, adminstatus, operstatus in info:
    if port_mode in fc_port_inventory_mode:
      name = '.'.join(str(x) for x in (ord(byte) for byte in port_id))
      params = { "fcmode": port_mode }
      if fc_inventory_monitor_state:
        params["state"] = [ int(operstatus) ]
      inventory.append((name, params))
  return inventory


def check_fc_port(item, params, info):
  for line in info:
    port_id, port_mode, adminstatus, operstatus, linkfailures, synclosses, primseqprotoerrors, invalidtxwords, invalidcrcs, addressiderrors, linkresetins, linkresetouts, olsins, olsouts, c3inframes, c3outframes, c3inoctets, c3outoctets, c3discards = line
    if item == '.'.join(str(x) for x in (ord(byte) for byte in port_id)):

      worst_state = 0
      adminstatus = int(adminstatus)
      operstatus = int(operstatus)
      infotext = []
      perfdata = []

      gbit = params.get("assumed_speed")
 
      wirespeed = gbit * 1000000000.0 * 0.8 / 8

      this_time = time.time()
      try:
        timedif, inoctets_rate = get_counter("fc.C3InOctets.%s" % item, this_time, saveint(c3inoctets))
        timedif, outoctets_rate = get_counter("fc.C3OutOctets.%s" % item, this_time, saveint(c3outoctets))

        average = params.get("average")

        bw_thresh = params.get("bw")
        if bw_thresh == None:
          warn_bytes, crit_bytes = None, None
        else:
          warn, crit = bw_thresh
          if type(warn) == float:
            warn_bytes = wirespeed * warn / 100.0
          else:
            warn_bytes = warn * 1048576.0
            if type(crit) == float:
              crit_bytes = wirespeed * crit / 100.0
            else:
              crit_bytes = crit * 1048576.0

        for what, value in [("In", inoctets_rate), ("Out", outoctets_rate)]:
          infotext.append("%s: %s/s" % (what, get_bytes_human_readable(value)))
          perfdata.append((what, value, warn_bytes, crit_bytes, 0, wirespeed))

        infotext.append("assuming %gGbit/s" % (gbit))

        timedif, inframes_rate = get_counter("fc_port.c3inframes.%s" % item, this_time, saveint(c3inframes))
        timedif, outframes_rate = get_counter("fc_port.c3outframes.%s" % item, this_time, saveint(c3outframes))
        totalframes_rate = inframes_rate + outframes_rate

        for what, value in [ ("inframes", inframes_rate), ("outframes", outframes_rate) ]:
          perfdata.append((what, value))

        for desc, counter, ref in [
          ( "C3Discards", c3discards, outframes_rate ),
          ( "LinkFailures", linkfailures, totalframes_rate ),
          ( "SyncLosses", synclosses, totalframes_rate ),
          ( "PrimSeqProtoErrors", primseqprotoerrors, totalframes_rate ),
          ( "InvalidTxWords", invalidtxwords, totalframes_rate ),
          ( "InvalidCrcs", invalidcrcs, inframes_rate ),
          ( "AddressIdErrors", addressiderrors, totalframes_rate ),
          ( "LinkResetIns", linkresetins, inframes_rate ),
          ( "LinkResetOuts", linkresetouts, outframes_rate ),
          ( "OlsIns", olsins, inframes_rate ),
          ( "OlsOuts", olsouts, outframes_rate ),]:

          timedif, per_sec = get_counter("fc.%s.%s" % (desc, item), this_time, saveint(counter))
          perfdata.append( (desc, per_sec) )
  
          if ref > 0 or per_sec > 0:
            rate = per_sec / (ref + per_sec)
          else:
            rate = 0
          text = "%s: %.2f%%" % (desc, rate * 100.0)

          error_percentage = rate * 100.0
          warn, crit = params[desc]
          if crit != None and error_percentage >= crit:
            worst_state = max(2, worst_state)
            infotext.insert(0, text)
          elif warn != None and error_percentage >= warn:
            worst_state = max(1, worst_state)
            infotext.insert(0, text)

      except MKCounterWrapped, e:
        for counter, value in [( "C3InOctets", c3inoctets ),
          ( "C3OutOctets", c3outoctets ), ( "C3Discards", c3discards ),
          ( "LinkFailures", linkfailures ), ( "SyncLosses", synclosses ),
          ( "PrimSeqProtoErrors", primseqprotoerrors ),
          ( "InvalidTxWords", invalidtxwords ), ( "InvalidCrcs", invalidcrcs ),
          ( "AddressIdErrors", addressiderrors ), ( "LinkResetIns", linkresetins ),
          ( "LinkResetOuts", linkresetouts ), ( "OlsIns", olsins ), ( "OlsOuts", olsouts ),]:
          try:
            get_counter("fc_port.%s.%s" % (counter, item), this_time, saveint(value))
          except MKCounterWrapped, e:
            pass
        perfdata = [] 

      if fc_check_adminstate:
        if operstatus != adminstatus:
          worst_state = max(2, worst_state)
          infotext.insert(0, "Operating status %s(%d) does not correspond with admin status %s(%d)" % (fc_port_operstatus[operstatus], operstatus, fc_port_adminstatus[adminstatus], adminstatus))

      if fc_inventory_monitor_state and operstatus == params.get("state"):
        pass
      elif params.get("operstatus") == None or operstatus in params["operstatus"]:
        pass
      else:
        worst_state = max(2, worst_state)
        infotext.insert(0, "Operating status %s(%d)" % (fc_port_operstatus[operstatus], operstatus))

      if worst_state == 1:
        infotext[-1] += "(!)"
      elif worst_state == 2:
        infotext[-1] += "(!!)"

      return (worst_state, '%s - %s' % (nagios_state_names[worst_state], ', '.join(infotext)), perfdata)


check_info["fc_port"] = {
    "inventory_function"       : inventory_fc_port,
    "check_function"           : check_fc_port,
    "has_perfdata"             : True,
    "service_description"      : "FC Port %s",
    "default_levels_variable"  : "fc_port_default_levels",
    'snmp_info'                : ( ".1.3.6.1.2.1.75.1", [ 
        "2.1.1.1", # fcFxPortID
        "2.1.1.3", # fcFxPortOperMode
        "2.2.1.1", # fcFxPortPhysAdminStatus
        "2.2.1.2", # fcFxPortPhysOperStatus
        "3.1.1.1", # fcFxPortLinkFailures
        "3.1.1.2", # fcFxPortSyncLosses
        "3.1.1.4", # fcFxPortPrimSeqProtoErrors
        "3.1.1.5", # fcFxPortInvalidTxWords
        "3.1.1.6", # fcFxPortInvalidCrcs
        "3.1.1.8", # fcFxPortAddressIdErrors
        "3.1.1.9", # fcFxPortLinkResetIns
        "3.1.1.10", # fcFxPortLinkResetOuts
        "3.1.1.11", # fcFxPortOlsIns
        "3.1.1.12", # fcFxPortOlsOuts
        "4.3.1.1", # fcFxPortC3InFrames
        "4.3.1.2", # fcFxPortC3OutFrames
        "4.3.1.3", # fcFxPortC3InOctets
        "4.3.1.4", # fcFxPortC3OutOctets
        "4.3.1.5", # fcFxPortC3Discards
    ] ),
    "snmp_scan_function"        : lambda oid: oid(".1.3.6.1.2.1.75.1.1.1.0") != None,
}

